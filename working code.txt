+<html>
  <head>
    <title>Tone Generator</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
  </head>
  <script src="index2.js" type="text/javascript"></script>
  <body>
    <div class="container">
    <canvas style="margin-top: 20px" id="canvas" width="1200" height="800"></canvas>
    <div class="container">

      <div class="row" style="margin-top: 30px">
          <div class="col">
            <button class="btn btn-primary" id="create-button" title="Create">Create new circle</button>
            <div id="controls" class="container" style="margin-top: 20px">
          </div>
          <br>
          <button class="btn btn-success" id="start-button" title="Play">Play</button>
          <button class="btn btn-danger" id="stop-button" title="Stop">Stop</button>
          <br>
          </div>
          <div class="col" style="margin-right: 76px">
              <table id="timeline" class="table table-hover">
                <tr>
                  <th>Circle's name</th>
                  <th>Overtones</th>
                  <th>Seconds</th>
                  <th>Frequency</th>
                  <th>Speed</th>
                  <th>Speed a</th>
                  <th>Frequency a</th>
                </tr>
                <tr>
                  <td><select id="timeline-name" onchange="handleChange()">
                    <option>Choose...</option>
                  </select>
                  </td>
                  <td><select id="timeline-overtone">
                    <option value="-1">None</option>
                  </select>
                  </td>
                  <td>
                    <input id="timeline-seconds" type="number" min="0" step="1" value="0"/>
                  </td>
                  <td>
                    <input name="timeline-frequency" id="timeline-frequency" type="number" min="0" max= "5500" step="1" value="0">
                  </td>
                  <td>
                    <input id="timeline-speed" type="number" min="0" max= "100" step="0.1" value="0"/>
                  </td>
                  <td>
                    <input id="timeline-speed-a" type="number" min="-5" max= "5" step="0.01" value="0"/> 
                  </td>
                  <td>
                    <input id="timeline-frequency-a" type="number" min="-10" max= "10" step="0.01" value="0"/> 
                  </td>
                  <td>
                    <button class="btn btn-primary" id="add-timeline">Add to timeline</button>
                  </td>
                </tr>
              </table>
          </div>
      </div>
    </div>
  </div>
  </div>
    </div>
  </div>
    <script>
        let flag = false
        var canvas = document.getElementById("canvas");
        var ctx = canvas.getContext("2d");
        var circles = new Array();
        var timelineItems = new Array();
        let lastIndex = 0;
        ctx.fillStyle = "black";
        ctx.fillRect(0, 0, canvas.width, canvas.height);

          const center = new Path2D();
          center.arc(canvas.width, canvas.height, 15, 0, 2 * Math.PI);

        $(document).ready(function () {
  $(document).on("click", "#start-button", function(e) {
      playFrequency(circles);
      if (!flag)  {
        movement(circles);
        flag = true
      }
      if(timelineItems.length > 0) {
        launchTimeline(timelineItems);
      }
  })
});

$(document).ready(function () {
  $(document).on("click", "#stop-button", function(e) {
    stopFrequency(circles);
  })
});

$(document).ready(function () {
  $(document).on("click", "#add-timeline", function(e) {
    let name = document.getElementById("timeline-name").value
    let overtone = document.getElementById("timeline-overtone")
    let seconds = document.getElementById("timeline-seconds").value
    var freq = document.getElementById("timeline-frequency").value;
    let speed = document.getElementById("timeline-speed").value
    let freq_a = document.getElementById("timeline-frequency-a").value
    let speed_a = document.getElementById("timeline-speed-a").value
    let freq_overtone=-1
    let speed_overtone=-1

    if (parseInt(overtone) === -1) {
      let freq_overtone = document.getElementsByName("frequency_overtone"+overtone.value)[0].value
      let speed_overtone = document.getElementsByName("speed_overtone"+overtone.value)[0].value
    }
    var table = document.getElementById("timeline")
    table.innerHTML += "<tr name='addItemTimeline'>"
    var tr = document.getElementsByName("addItemTimeline")[document.getElementsByName("addItemTimeline").length-1]
    console.log(parseInt(overtone.value))
    tr.innerHTML += "<td>" + "Circle" + (parseInt(name) + 1) + "</td>"

    if (parseInt(overtone.value) >= 0 )
    tr.innerHTML += "<td>" +  "overtone"+ (parseInt(overtone.value)+1) + "</td>"
      else 
      tr.innerHTML += "<td>" + "None" + "</td>"
    //tr.innerHTML += "<td>" + (parseInt(overtone.value) === -1 ? "None" : "overtone"+ parseInt(overtone.value)+1) + "</td>"
    tr.innerHTML += "<td>" + seconds + "</td>"
    tr.innerHTML += "<td>" + freq + "</td>"
    tr.innerHTML += "<td>" + speed + "</td>"
    tr.innerHTML += "<td>" + speed_a + "</td>"
    tr.innerHTML += "<td>" + freq_a + "</td>"
    console.log(tr.innerHTML)
    table.innerHTML += "</tr>"
    addTimeline(timelineItems,name, overtone ? overtone.value : -1,seconds,freq,speed,speed_a,freq_a,freq_overtone,speed_overtone)
  })
});

$(document).ready(function () {
  $(document).on("click", "#create-button", function(e) {

    createCircle(circles.length, canvas.width, canvas.height, circles)
    var length = circles.length

    var div = document.getElementById("controls")
    div.appendChild(Object.assign(document.createElement("label"), {innerHTML : 'Frequency ' + length}))
    div.appendChild(Object.assign(document.createElement("br")))
    div.appendChild(Object.assign(document.createElement('input'), {name: "frequency", class: "input-control", id: "frequency" + (length-1), type: "number", min: "0", max: "5500", step: "1", value: "0"}))
    div.appendChild(Object.assign(document.createElement("br")))
    div.appendChild(Object.assign(document.createElement("label"), {innerHTML : 'Speed ' + length}))
    div.appendChild(Object.assign(document.createElement("br")))
    div.appendChild(Object.assign(document.createElement('input'), {name: "speed", class: "input-control", id: "speed" + (length-1), type: "range", min: "0", max: "100", step: "0.1", value: "0"}))
    div.appendChild(Object.assign(document.createElement("br")))
    div.appendChild(Object.assign(document.createElement("label"), {innerHTML : 'Speed a: ' + length}))
    div.appendChild(Object.assign(document.createElement("br")))
    div.appendChild(Object.assign(document.createElement('input'), {name: "speed_a", class: "input-control", id: "speed_a" + (length-1), type: "number", min: "-5", max: "5", step: "0.01", value: "0"}))
    div.appendChild(Object.assign(document.createElement("br")))
    div.appendChild(Object.assign(document.createElement("label"), {innerHTML : 'Frequency a: ' + length}))
    div.appendChild(Object.assign(document.createElement("br")))
    div.appendChild(Object.assign(document.createElement('input'), {name: "frequency_a", id: "frequency_a" + (length-1), style: "margin-bottom: 30px", class: "input-control", type: "number", min: "-10", max: "10", step: "0.01", value: "0"}))
    div.appendChild(Object.assign(document.createElement("br")))
    var childDiv = document.createElement("div")
    childDiv.setAttribute("id", "div"+(length-1))
    div.appendChild(childDiv)
    div.appendChild(Object.assign(document.createElement("br")))
    var btn = document.createElement("button")
    btn.innerHTML = "Add overtone"
    btn.setAttribute("id", "add-child")
    btn.setAttribute("class","btn btn-dark")
    btn.setAttribute("name",circles[circles.length-1].id)
    div.appendChild(btn)
    div.appendChild(Object.assign(document.createElement("br")))
    div.appendChild(Object.assign(document.createElement("br")))

    var timelineName = document.getElementById('timeline-name')
    for (let i = lastIndex; i < circles.length; i++) {
      timelineName.appendChild(Object.assign(document.createElement("option"), {innerHTML: i + 1 + " apskritimas", value: i}))
      lastIndex = i + 1
    }
  })
});

$(document).ready(function () {
  $(document).on("click", "#add-child", function(e) {
    parentNode = findCircle(this.name)
    createOvertone(parentNode, parentNode.overtones)
    var div = document.getElementById("div"+(parentNode.id))
      div.appendChild(Object.assign(document.createElement("label"), {innerHTML : 'Frequency ' + parentNode.overtones.length + ' *'}))
      div.appendChild(Object.assign(document.createElement("br")))
      div.appendChild(Object.assign(document.createElement('input'), {name: "frequency_overtone"+this.name, class: "input-control", id: "frequency" + (length-1), type: "number", min: "0", max: "5500", step: "0.1", value: "0"}))
      div.appendChild(Object.assign(document.createElement("br")))
      div.appendChild(Object.assign(document.createElement("label"), {innerHTML : 'Overtone ' + parentNode.overtones.length + 'speed'}))
      div.appendChild(Object.assign(document.createElement("br")))
      div.appendChild(Object.assign(document.createElement('input'), {name: "speed_overtone"+this.name, class: "input-control", id: "speed" + (length-1), type: "range", min: "0", max: "80", step: "0.1", value: "0"}))
      div.appendChild(Object.assign(document.createElement("br")))

/*       var addOptions = document.getElementById("timeline-overtone")
      while (addOptions.options.length > 0) {
        addOptions.remove(0);
      }
      addOptions.options[0]=document.createElement("option", {innerHTML: "None", value: -1})
      addOptions.options[0].innerHTML="None"
      for (let i = 0; i < parentNode.overtones.length; i++) {
        addOptions.appendChild(Object.assign(document.createElement("option"), {innerHTML: i + 1 + " overtone", value: i}))
      } */
  })
});

    function findCircle(id) {
      for (let i = 0; i < circles.length; i++) {
        if (parseInt(id) === parseInt(circles[i].id)) {
          return circles[i];
        }
      }
    }


    function handleChange() {
      var select = document.getElementById("timeline-name")
      var id = parseInt(select.value)
      var addOptions = document.getElementById("timeline-overtone")
      while (addOptions.options.length > 0) {
        addOptions.remove(0);
      }
      addOptions.options[0]=document.createElement("option", {innerHTML: "None", value: -1})
      addOptions.options[0].innerHTML="None"
      let circle = findCircle(id)
      if (circle.overtones.length === 0) return
      for (let i = 0; i < circle.overtones.length; i++) {
        addOptions.appendChild(Object.assign(document.createElement("option"), {innerHTML: i + 1 + " overtone", value: i}))
      }

    }

    </script>
  </body>
</html>

java script !!!!!!!!!!!!!!!!!!!!!!!!!



class Circle {
    constructor(id,x, y, oscNode, gainNode, audioCtx) {
        this.id = id
        this.x_center = x
        this.y_center = y
        this.read = false;


        this.x = 0
        this.y = 0
        this.angle = 0
        this.speed = 0
        this.frequency = 0

        this.oscNode = oscNode
        this.gainNode = gainNode
        this.audioCtx = audioCtx

        this.overtones = new Array();
    }

    draw(ctx, speed, radius) {

        const center = new Path2D();
        center.arc(this.x_center, this.y_center, 15, 0, 2 * Math.PI);

        ctx.stroke(center);
        ctx.fillStyle = "white";
        ctx.fill(center);
        if (speed == 0) return 0 
        var newX  = radius * Math.cos(this.angle * (Math.PI/180));
        var newY = radius * Math.sin(this.angle * (Math.PI/180));

        this.x = newX + this.x_center;
        this.y = newY + this.y_center;

        const circle = new Path2D();
        circle.arc(this.x, this.y, 12, 0, 2 * Math.PI);
    
        ctx.stroke(circle);
        ctx.fillStyle = "white";
        ctx.fill(circle);

        this.angle += speed;
        return Math.sqrt((this.x - (canvasWidth/2))**2 + (this.y - (canvasHeight/2))**2);

    }
}

class Overtone {
    constructor(oscNode, gainNode, audioCtx, parentNode) {
        this.x = 0
        this.y = 0
        this.parentNode = parentNode
        this.speed = 0
        this.frequency = 0
        this.angle = 0
        this.oscNode = oscNode
        this.gainNode = gainNode
        this.audioCtx = audioCtx
        this.read=false
    }

    draw(ctx, speed, radius) {
        if (speed == 0)return
        if (this.parentNode.speed == 0 ) return
        
        radius+=20
        var newX  = radius * Math.cos(this.angle * (Math.PI/180));
        var newY = radius * Math.sin(this.angle * (Math.PI/180));

        
        this.x = newX + this.parentNode.x;
        this.y = newY + this.parentNode.y;

        const circle = new Path2D();
        circle.arc(this.x, this.y, 8, 0, 2 * Math.PI);
    
        ctx.stroke(circle);
        ctx.fillStyle = "red";
        ctx.fill(circle);

        this.angle += speed * 100;
        return

    }
}


class TimelineItem {
    constructor(name,child_id,seconds,freq,speed,speed_a,freq_a,freq_overtone,speed_overtone) {
        this.name = name
        this.child_id = child_id
        this.seconds = seconds
        this.frequency = freq
        this.speed = speed
        this.frequency_a = freq_a
        this.speed_a = speed_a
        this.freq_overtone=freq_overtone
        this.speed_overtone=speed_overtone
    }
}



function movement(circles) {
    
// grab the canvas and context
var canvas = document.getElementById('canvas');
var ctx = canvas.getContext('2d');


// inital coordinates of the black square
var x = 0;
var y = 0;

canvasWidth = canvas.width
canvasHeight = canvas.height

// the center of the circle
var circleCenterX = canvasWidth/2;
var circleCenterY = canvasHeight/2;

// the radius and angle of the circle, we start at angle 0
var angle = 0.0;
var circle = new Circle(circleCenterX, circleCenterY)
function animate() {

/*     var speed = parseFloat(document.getElementById("speed").value)
    var radius = parseFloat((document.getElementById("frequency").value))**(1/(Math.log(5500,10) / Math.log(canvasHeight/2,10))); */

    ctx.clearRect(0, 0, canvas.width, canvas.height); 
    ctx.fillStyle = "black";
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // const center = new Path2D();
    // center.arc(circleCenterX, circleCenterY, 15, 0, 2 * Math.PI);

    // ctx.stroke(center);
    // ctx.fillStyle = "white";
    // ctx.fill(center);
    

/*     let distance = circle.draw(ctx, speed, radius);
    let frequency = distance**(Math.log(5500,10) / Math.log(canvasHeight/2,10))
    console.log(frequency) */

    var freq_controls = document.getElementsByName("frequency")
    var speed_controls = document.getElementsByName("speed")
    var speed_a_controls = document.getElementsByName("speed_a")
    var frequency_a_controls = document.getElementsByName("frequency_a")


    
    for (let i = 0; i < freq_controls.length; i++) {
        var speed_overtone_controls=document.getElementsByName("speed_overtone"+circles[i].id)
        var frequency_overtone_controls=document.getElementsByName("frequency_overtone"+circles[i].id)
        circles[i].speed  = parseFloat(speed_controls[i].value)
        let circle_radius = 20 + parseFloat((freq_controls[i].value))**(1/(Math.log(5000,10) / Math.log(canvasHeight/2,10)));
        let circle_distance = circles[i].draw(ctx, circles[i].speed, circle_radius)
        circles[i].frequency= circle_distance**(Math.log(5500,10) / Math.log(canvasHeight/2,10))


        if (circles[i].frequency == 0)
            circles[i].oscNode.frequency.value = 0;
        else
            setTimeout(() => circles[i].oscNode.frequency.exponentialRampToValueAtTime(parseFloat(circles[i].frequency), circles[i].audioCtx.currentTime + 0,2))
        if (circles[i].speed == 0) 
            circles[i].gainNode.gain.value = 0;
        else
            setTimeout(() => circles[i].gainNode.gain.exponentialRampToValueAtTime(parseFloat(circles[i].speed ) / 50, circles[i].audioCtx.currentTime + 0,1))

            for (let j = 0; j < circles[i].overtones.length;j++) {

                circles[i].overtones[j].draw(ctx,parseFloat(speed_overtone_controls[j].value)/100,parseFloat(frequency_overtone_controls[j].value)*4)
                circles[i].overtones[j].frequency=circles[i].frequency*parseFloat(frequency_overtone_controls[j].value)
                circles[i].overtones[j].speed  = circles[i].speed*parseFloat(speed_overtone_controls[j].value)/100
                if (circles[i].overtones[j].frequency == 0)
                    circles[i].overtones[j].oscNode.frequency.value = 0;
                else
                    setTimeout(() => circles[i].overtones[j].oscNode.frequency.exponentialRampToValueAtTime(parseFloat(circles[i].overtones[j].frequency), circles[i].overtones[j].audioCtx.currentTime + 0,2))
                if (circles[i].overtones[j].speed == 0) 
                    circles[i].overtones[j].gainNode.gain.value = 0;
                else
                    setTimeout(() => circles[i].overtones[j].gainNode.gain.exponentialRampToValueAtTime(parseFloat(circles[i].overtones[j].speed ) / 100, circles[i].overtones[j].audioCtx.currentTime + 0,1))
            }
        speed_controls[i].value = parseFloat(speed_controls[i].value) + parseFloat(speed_a_controls[i].value);
        if(parseFloat(frequency_a_controls[i].value)>=0 ||parseFloat(frequency_a_controls[i].value)<=0 )
        freq_controls[i].value = parseFloat(freq_controls[i].value) + parseFloat(frequency_a_controls[i].value);
        }

    
    setTimeout(animate, 33);
}
animate();
}

function createCircle(id,canvas_width, canvas_height, circles) {
    const audioCtx = new AudioContext()
    const oscNode = new OscillatorNode(audioCtx, {
        type: "sine",
        frequency: 0,
    });

    const gainNode = new GainNode(audioCtx, {
        gain: 0.5,
    });

    circles.push(new Circle(id,canvas_width/2, canvas_height/2,oscNode,gainNode, audioCtx))

}

function createOvertone(parentNode, overtones) {
    const audioCtx = new AudioContext()
    const oscNode = new OscillatorNode(audioCtx, {
        type: "sine",
        frequency: 0,
    });

    const gainNode = new GainNode(audioCtx, {
        gain: 0.5,
    });

    overtones.push(new Overtone(oscNode,gainNode, audioCtx,parentNode))

}


function playFrequency(circles) { 
    for (let i = 0; i < circles.length; i++) {
        for (let j = 0; j < circles[i].overtones.length;j++) {
            circles[i].overtones[j].audioCtx.resume();
            if (circles[i].overtones[j].read) continue;
            circles[i].overtones[j].oscNode.connect(circles[i].overtones[j].gainNode).connect(circles[i].overtones[j].audioCtx.destination);
            circles[i].overtones[j].oscNode.start();
            circles[i].overtones[j].read = true
        }
        circles[i].audioCtx.resume();
        if (circles[i].read) continue;
        circles[i].oscNode.connect(circles[i].gainNode).connect(circles[i].audioCtx.destination);
        circles[i].oscNode.start();
        circles[i].read = true
    }
}
function stopFrequency(circles) {
    var frequency_a_controls = document.getElementsByName("frequency_a")
    var speed_a_controls = document.getElementsByName("speed_a")

    for (let i = 0; i < circles.length; i++) {
       circles[i].audioCtx.suspend();
       speed_a_controls[i].value = 0
       frequency_a_controls[i].value=0
       for (let j = 0; i < circles[i].overtones.length;j++) {
        circles[i].overtones[j].audioCtx.suspend();
       }
    }

}

function addTimeline(timelineItems, name, child_id, seconds, freq, speed, speed_a, freq_a,freq_overtone,speed_overtone) {
    timelineItems.push(new TimelineItem(name, child_id,seconds,freq,speed,speed_a,freq_a,freq_overtone,speed_overtone))
}

function setValues(timelineItem,circles) {
    setTimeout(function() {
        var freq_controls = document.getElementById("frequency"+timelineItem.name)
        var speed_controls = document.getElementById("speed"+timelineItem.name)
        var speed_a_controls = document.getElementById("speed_a"+timelineItem.name)
        var frequency_a_controls = document.getElementById("frequency_a"+timelineItem.name)
    if (timelineItem.child_id >= 0) {
            var freq_overtone_controls =document.getElementsByName("frequency_overtone"+timelineItem.name)[timelineItem.child_id]
            var speed_overtone_controls=document.getElementsByName("speed_overtone"+timelineItem.name)[timelineItem.child_id]
    
            freq_overtone_controls.value = timelineItem.frequency
            speed_overtone_controls.value = timelineItem.speed
    }
    else {
    freq_controls.value = timelineItem.frequency
    speed_controls.value = timelineItem.speed
    speed_a_controls.value=timelineItem.speed_a
    frequency_a_controls.value=timelineItem.frequency_a
            
}

    }, parseFloat(timelineItem.seconds) * 1000)

}

function findCircle(id,circles) {
    for (let i = 0; i < circles.length; i++) {
      if (parseInt(id) === parseInt(circles[i].id)) {
        return circles[i];
      }
    }
  }

function launchTimeline(timelineItems) {
    for (let i = 0; i < timelineItems.length; i++) {
        setValues(timelineItems[i])
    }
}